{"version":3,"sources":["pages/museums/museum_types/index.tsx"],"names":["MuseumTypes","props","onDelete","event","a","stopPropagation","museumTypes","delMuseumType","ids","map","e","checked","push","stairOneId","join","isOk","success","getInit","chose","index","changeMuseumData","bool","choseAll","navTo","type","id","name","edit","state","history","match","params","museumId","isMyself","pathname","toggle","key","val","setState","getList","page","getMuseumTypes","changeCommonData","this","className","direction","Item","onLoadData","i","onClick","src","alt","img","medium","length","to","document","title","nextProps","nextState","nextContext","React","Component","connect","museumReducer","commonReducer","dispatch","museumActions","commonActions","bindActionCreators"],"mappings":"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","file":"static/js/27.daa04426.chunk.js","sourcesContent":["import React from 'react'\r\nimport './index.scss'\r\nimport {entries} from \"reducer\";\r\nimport {museumActions, commonActions} from \"action\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {Flex, Toast} from 'antd-mobile'\r\nimport {ScrollVertical, AllowRight, EmptyData} from 'components'\r\nimport {Link} from 'react-router-dom'\r\n\r\ninterface P {\r\n    className?: string,\r\n    match: any,\r\n    history: any,\r\n    changeMuseumData: any,\r\n    getMuseumTypes: any,\r\n    delMuseumType: any,\r\n    changeCommonData: any,\r\n    page: number,\r\n    museumTypes: any[]\r\n}\r\n\r\ninterface S {\r\n    edit: boolean\r\n}\r\n\r\nclass MuseumTypes extends React.Component<P, S> {\r\n    // 构造\r\n    constructor(props: any) {\r\n        super(props);\r\n        // 初始状态\r\n        this.state = {\r\n            edit: false\r\n        };\r\n    }\r\n\r\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\r\n        const {\r\n            props: {\r\n                className = '',\r\n                museumTypes,\r\n                match: {params: {id, isMyself}}\r\n            },\r\n            state: {\r\n                edit\r\n            },\r\n            toggle,\r\n            navTo,\r\n            choseAll,\r\n            chose,\r\n            onDelete,\r\n            getList\r\n        } = this\r\n        return (\r\n            <Flex className={`museum_types_page`} direction={\"column\"}>\r\n                <Flex.Item>\r\n                    <ScrollVertical onLoadData={getList}>\r\n                        {\r\n                            museumTypes.map((e: any, i: number) => <Flex className={'type'} key={i}\r\n                                                                         onClick={() => navTo(e)}>\r\n                                {\r\n                                    edit && <img className={'checkbox_img'} onClick={(event) => chose(event, i)}\r\n                                                 src={e.checked ? '/lsc_h5_hash/imgs/chose1.png' : '/lsc_h5_hash/imgs/chose2.png'} alt=\"\" />\r\n                                }\r\n                                <Flex.Item>\r\n                                    {e.img && e.img.medium && < img className={'logo'} src={e.img.medium} alt=\"\" />}\r\n                                    <AllowRight className={'name'}>\r\n                                        <Flex.Item>{e.name}</Flex.Item>\r\n                                        {isMyself === 'true' && <span>增加加下级目录</span>}\r\n                                    </AllowRight>\r\n                                </Flex.Item>\r\n                            </Flex>)\r\n                        }\r\n                        {\r\n                            !museumTypes.length && <EmptyData />\r\n                        }\r\n                    </ScrollVertical>\r\n                </Flex.Item>\r\n                {\r\n                    isMyself === 'true' && <Flex className={`oprs`}>\r\n                        {\r\n                            edit && <Flex.Item>\r\n                              <span onClick={() => choseAll(true)}>全选</span>\r\n                              <span onClick={() => choseAll(false)}>全不选</span>\r\n                              <span onClick={() => toggle('edit')}>取消</span>\r\n                              <span onClick={onDelete}>删除</span>\r\n                            </Flex.Item>\r\n                        }\r\n                      <img onClick={() => toggle('edit')} src=\"/lsc_h5_hash/imgs/edit.png\" alt=\"\" />\r\n                      <Link to={'/museums/museum_type_edit/add/' + id}>\r\n                        <img src=\"/lsc_h5_hash/imgs/add1.png\" alt=\"\" />\r\n                      </Link>\r\n                    </Flex>\r\n                }\r\n            </Flex>\r\n        );\r\n    }\r\n\r\n    onDelete = async (event: any) => {\r\n        event.stopPropagation()\r\n        const {museumTypes, delMuseumType} = this.props\r\n        let ids: any[] = []\r\n        museumTypes.map(e => {\r\n            if (e.checked) {\r\n                ids.push(e.stairOneId)\r\n            }\r\n        })\r\n        const {isOk} = await delMuseumType(ids.join('&'))\r\n        if (isOk) {\r\n            Toast.success('类目删除成功!')\r\n            await this.getInit()\r\n        }\r\n    }\r\n\r\n    chose = async (event: any, index: number) => {\r\n        event.stopPropagation()\r\n        const {changeMuseumData, museumTypes} = this.props\r\n        const bool: boolean = museumTypes[index].checked\r\n        museumTypes[index].checked = !bool\r\n        await changeMuseumData({museumTypes: [...museumTypes]})\r\n    }\r\n\r\n    choseAll = async (bool: boolean) => {\r\n        const {changeMuseumData, museumTypes} = this.props\r\n        museumTypes.map(e => {\r\n            e.checked = bool\r\n            return e\r\n        })\r\n        await changeMuseumData({museumTypes: [...museumTypes]})\r\n    }\r\n\r\n    navTo = async (type:any) => {\r\n        const {stairOneId: id,name} = type\r\n        const {edit} = this.state\r\n        const {history, match: {params: {id: museumId, isMyself = 'false'}}} = this.props\r\n        history.push({pathname: edit ? '/museums/museum_type_edit/edit/' + id : '/museums/museum_subtypes/' + museumId +'/' + id + '/'+name+ '/' + isMyself})\r\n    }\r\n\r\n    toggle = async (key: string) => {\r\n        // @ts-ignore\r\n        const val: boolean = this.state[key]\r\n        // @ts-ignore\r\n        this.setState({[key]: !val})\r\n    }\r\n\r\n\r\n    getList = async () => {\r\n        const {page, getMuseumTypes, match: {params: {id}}} = this.props\r\n        await getMuseumTypes({id, page})\r\n    }\r\n\r\n    getInit = async () => {\r\n        const {changeCommonData} = this.props\r\n        await changeCommonData({page: 1})\r\n        await this.getList()\r\n    }\r\n\r\n\r\n    componentDidMount(): void {\r\n        document.title = '博物馆类目'\r\n        this.getInit()\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<any>, nextState: Readonly<any>, nextContext: any): boolean {\r\n        return true\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: entries) {\r\n    const {museumTypes} = state.museumReducer\r\n    const {page} = state.commonReducer\r\n    return {\r\n        museumTypes, page\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch: any) {\r\n    const {getMuseumTypes, delMuseumType, changeMuseumData} = museumActions\r\n    const {changeCommonData} = commonActions\r\n    return {\r\n        ...bindActionCreators({getMuseumTypes, delMuseumType, changeMuseumData, changeCommonData}, dispatch),\r\n        dispatch\r\n    };\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MuseumTypes)\r\n"],"sourceRoot":""}